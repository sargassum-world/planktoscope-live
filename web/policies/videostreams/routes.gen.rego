# Code generated by github.com/hairyhenderson/gomplate DO NOT EDIT.

package sargassum.pslive.web.policies.videostreams

import future.keywords

import data.sargassum.godest.routing

# Policy Scope

in_scope if {
	glob.match("/video-streams/*", [], input.resource.path)
}

in_scope if {
	glob.match("/video-streams/*.jpeg", [], input.resource.path)
}

in_scope if {
	glob.match("/video-streams/*.mjpeg", [], input.resource.path)
}

# Policy Result & Error

matching_routes contains route if {
	"GET" == input.operation.method
	["video-streams", "random-color", "frame.jpeg"] = split(trim_prefix(input.resource.path, "/"), "/")
	route := "GET /video-streams/random-color/frame.jpeg"
}

allow if {
	"GET" == input.operation.method
	["video-streams", "random-color", "frame.jpeg"] = split(trim_prefix(input.resource.path, "/"), "/")
}

matching_routes contains route if {
	"GET" == input.operation.method
	["video-streams", "random-color", "stream.mjpeg"] = split(trim_prefix(input.resource.path, "/"), "/")
	route := "GET /video-streams/random-color/stream.mjpeg"
}

allow if {
	"GET" == input.operation.method
	["video-streams", "random-color", "stream.mjpeg"] = split(trim_prefix(input.resource.path, "/"), "/")
}

matching_routes contains route if {
	"GET" == input.operation.method
	["video-streams", "animated-color", "frame.jpeg"] = split(trim_prefix(input.resource.path, "/"), "/")
	route := "GET /video-streams/animated-color/frame.jpeg"
}

allow if {
	"GET" == input.operation.method
	["video-streams", "animated-color", "frame.jpeg"] = split(trim_prefix(input.resource.path, "/"), "/")
}

matching_routes contains route if {
	"GET" == input.operation.method
	["video-streams", "animated-color", "stream.mjpeg"] = split(trim_prefix(input.resource.path, "/"), "/")
	route := "GET /video-streams/animated-color/stream.mjpeg"
}

allow if {
	"GET" == input.operation.method
	["video-streams", "animated-color", "stream.mjpeg"] = split(trim_prefix(input.resource.path, "/"), "/")
}

matching_routes contains route if {
	"GET" == input.operation.method
	["video-streams", "external-stream", "frame.jpeg"] = split(trim_prefix(input.resource.path, "/"), "/")
	route := "GET /video-streams/external-stream/frame.jpeg"
}

allow if {
	"GET" == input.operation.method
	["video-streams", "external-stream", "frame.jpeg"] = split(trim_prefix(input.resource.path, "/"), "/")
}

matching_routes contains route if {
	"GET" == input.operation.method
	["video-streams", "external-stream", "stream.mjpeg"] = split(trim_prefix(input.resource.path, "/"), "/")
	route := "GET /video-streams/external-stream/stream.mjpeg"
}

allow if {
	"GET" == input.operation.method
	["video-streams", "external-stream", "stream.mjpeg"] = split(trim_prefix(input.resource.path, "/"), "/")
}

errors contains error_matching if {
	in_scope
	error_matching := routing.error_matching_routes(matching_routes)
}
